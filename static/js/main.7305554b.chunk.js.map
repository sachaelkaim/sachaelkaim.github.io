{"version":3,"sources":["components/Navbar.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["AnimationFront","props","useSpring","from","left","top","width","height","background","to","next","a","div","className","style","Layout","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","NavDropdown","title","Item","Divider","eventKey","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAKe,SAASA,IACtB,IAAMC,EAAQC,YAAU,CACtBC,KAAM,CAAEC,KAAM,KAAMC,IAAK,KAAMC,MAAO,KAAMC,OAAQ,KAAMC,WAAY,cACtEC,GAAG,WAAD,4BAAE,WAAMC,GAAN,SAAAC,EAAA,sEAEMD,EAAK,CAAEN,KAAM,KAAMC,IAAK,KAAMC,MAAO,OAAQC,OAAQ,OAAQC,WAAY,cAF/E,uBAGME,EAAK,CAAEH,OAAQ,MAAOC,WAAY,eAHxC,uBAIME,EAAK,CAAEJ,MAAO,MAAOF,KAAM,MAAOI,WAAY,yBAJpD,uBAKME,EAAK,CAAEL,IAAK,KAAME,OAAQ,OAAQC,WAAY,cALpD,wBAMME,EAAK,CAAEL,IAAK,MAAOE,OAAQ,MAAOC,WAAY,gBANpD,yBAOME,EAAK,CAAEJ,MAAO,OAAQF,KAAM,KAAMI,WAAY,eAPpD,yBAQME,EAAK,CAAEJ,MAAO,MAAOE,WAAY,kBARvC,yBASME,EAAK,CAAEL,IAAK,KAAME,OAAQ,OAAQC,WAAY,iBATpD,yBAUME,EAAK,CAAEJ,MAAO,OAAQE,WAAY,mBAVxC,mEAAF,mDAAC,KAcL,OAAO,kBAAC,IAASI,IAAV,CAAcC,UAAU,aAAaC,MAAOb,I,4BCWtCc,MA9Bf,WACE,OACI,6BACE,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QAC3D,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,iBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKd,UAAU,WACf,kBAACc,EAAA,EAAIC,KAAL,CAAUN,KAAK,aAAf,UACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,YAAf,UACA,kBAACO,EAAA,EAAD,CAAaC,MAAM,MAAMJ,GAAG,2BACxB,kBAACG,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,UACA,kBAACO,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,kBACA,kBAACO,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,SACA,kBAACO,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBT,KAAK,eAAvB,oBAGJ,kBAACK,EAAA,EAAD,KACA,kBAACA,EAAA,EAAIC,KAAL,CAAUN,KAAK,UAAf,cACA,kBAACK,EAAA,EAAIC,KAAL,CAAUK,SAAU,EAAGX,KAAK,UAA5B,mB,MCNOY,MAXf,WAGE,OACE,kBAAC,WAAD,KACA,kBAAC,EAAD,MACA,kBAAClC,EAAD,QCAgBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7305554b.chunk.js","sourcesContent":["import { render } from 'react-dom'\r\nimport React from 'react'\r\nimport { useSpring, animated } from 'react-spring'\r\n\r\n\r\nexport default function AnimationFront() {\r\n  const props = useSpring({\r\n    from: { left: '0%', top: '0%', width: '0%', height: '0%', background: 'lightgreen' },\r\n    to: async next => {\r\n      while (10) {\r\n        await next({ left: '0%', top: '0%', width: '100%', height: '100%', background: 'lightblue' })\r\n        await next({ height: '50%', background: 'lightgreen' })\r\n        await next({ width: '50%', left: '50%', background: 'lightgoldenrodyellow' })\r\n        await next({ top: '0%', height: '100%', background: 'lightpink' })\r\n        await next({ top: '25%', height: '50%', background: 'lightsalmon' })\r\n        await next({ width: '100%', left: '0%', background: 'lightcoral' })\r\n        await next({ width: '50%', background: 'lightseagreen' })\r\n        await next({ top: '0%', height: '100%', background: 'lightskyblue' })\r\n        await next({ width: '100%', background: 'lightslategrey' })\r\n      }\r\n    },\r\n  })\r\n  return <animated.div className=\"script-box\" style={props} />\r\n}\r\n","import React from 'react'\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap'\r\n\r\nfunction Layout() {\r\n  return (\r\n      <div>\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"#home\">ok this works</Navbar.Brand>\r\n    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n        <Nav.Link href=\"#features\">Skills</Nav.Link>\r\n        <Nav.Link href=\"#pricing\">Github</Nav.Link>\r\n        <NavDropdown title=\"etc\" id=\"collasible-nav-dropdown\">\r\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n            <NavDropdown.Item href=\"#action/3.3\">HELLO</NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n        </NavDropdown>\r\n        </Nav>\r\n        <Nav>\r\n        <Nav.Link href=\"#deets\">More deets</Nav.Link>\r\n        <Nav.Link eventKey={2} href=\"#memes\">\r\n            Dank memes\r\n        </Nav.Link>\r\n        </Nav>\r\n    </Navbar.Collapse>\r\n    </Navbar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout;\r\n","import React, { Fragment } from 'react'\r\nimport './App.css'\r\nimport AnimationFront from './components/Navbar'\r\nimport Layout from './components/Layout'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n    <Layout />\r\n    <AnimationFront />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
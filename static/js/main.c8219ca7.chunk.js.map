{"version":3,"sources":["components/Navbar.js","components/Header.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["svgVariants","hidden","rotate","visible","transition","duration","pathVariants","opacity","pathLength","ease","useStyles","makeStyles","theme","menuSliderContainer","width","background","height","Navbar","useState","true","state","setState","toggleSlider","slider","open","classes","Box","component","AppBar","position","style","Toolbar","IconButton","onClick","svg","variants","initial","animate","fill","path","stroke","strokeWidth","d","Typography","color","variant","anchor","onClose","className","title","fontWeight","subtitle","container","top","left","transform","textAlign","zIndex","Header","strings","typeSpeed","backSpeed","loop","particlesCanvas","Home","canvasClassName","params","line_linked","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c8219ca7.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport {\r\nAppBar,\r\nToolbar,\r\nListItem,\r\nIconButton,\r\nListItemText,\r\nAvatar,\r\nDivider,\r\nList,\r\nTypography,\r\nBox\r\n} from \"@material-ui/core\";\r\nimport {\r\nDonutLarge,\r\nAssignmentId,\r\nHome,\r\nApps,\r\nContactMail\r\n} from \"@material-ui/icons\";\r\nimport { motion } from 'framer-motion';\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport MobileMenuSlider from \"@material-ui/core/Drawer\";\r\n\r\nconst svgVariants = {\r\n    hidden: { rotate: -180},\r\n    visible: {\r\n      rotate: 0,\r\n      transition: { duration : 1}\r\n    }\r\n  }\r\n  \r\n  const pathVariants = {\r\n    hidden: {\r\n      opacity: 0,\r\n      pathLength: 0\r\n    },\r\n    visible: {\r\n      opacity: 1,\r\n      pathLength: 1,\r\n      transition: {\r\n        duration: 2,\r\n        ease: \"easeInOut\",   \r\n      }\r\n    }\r\n  }\r\n\r\n// CSS STYLE\r\nconst useStyles= makeStyles(theme=> ({\r\n  menuSliderContainer: {\r\n    width: 280,\r\n    background: \"white\", \r\n    opacity: \"70%\",\r\n    height: \"100%\"\r\n  }\r\n}));\r\n\r\nconst Navbar = () => {\r\n    const [state,setState] = useState({\r\n      true: false\r\n    })\r\n\r\n    const toggleSlider = (slider, open) => () => {\r\n      setState({ ...state, [slider]: open});\r\n    }\r\n\r\n    const classes = useStyles();\r\n    const sliderMenu = slider => (\r\n       <Box className={classes.menuSliderContainer}>\r\n\r\n       </Box>\r\n    )\r\n    return (\r\n        <>\r\n       \r\n        <Box component=\"nav\">\r\n            <AppBar \r\n              position=\"static\" \r\n              style={{background: \"#1976d2\", opacity:\"70%\"}}>\r\n                <Toolbar>\r\n                    <IconButton onClick={toggleSlider(\"true\", true)}>\r\n                      <motion.svg \r\n                        height=\"40\" \r\n                        width=\"40\"  \r\n                        variants={svgVariants}\r\n                        initial='hidden'\r\n                        animate='visible'>\r\n                        <g fill=\"none\">\r\n                          <motion.path stroke=\"white\" strokeWidth=\"2\"  d=\"M5 10 l30 0\" variants={pathVariants}/>\r\n                          <motion.path stroke=\"white\" strokeWidth=\"2\"  d=\"M5 20 l30 0\" variants={pathVariants}/>\r\n                          <motion.path stroke=\"white\" strokeWidth=\"2\"  d=\"M5 30 l30 0\" variants={pathVariants}/>\r\n                        </g>\r\n                      </motion.svg>\r\n                    </IconButton>\r\n                    <Typography \r\n                      style={{color: \"white\"}}\r\n                      variant=\"h6\">\r\n                        Portfolio\r\n                    </Typography>\r\n                    <MobileMenuSlider\r\n                      anchor=\"left\"\r\n                      open={state.true}\r\n                      onClose={toggleSlider(\"true\", false)}\r\n                    >\r\n                       {sliderMenu(\"true\")}\r\n                    </MobileMenuSlider>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\r\nimport {\r\nTypography,\r\nAvatar,\r\nGrid,\r\nBox\r\n} from \"@material-ui/core\";\r\n/**import avatar from \"../images/profilepic.png\"; **/\r\nimport Typed from \"react-typed\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\n\r\n// CSS STYLES\r\nconst useStyles = makeStyles(theme=> ({\r\n    title: {\r\n        color: \"black\",\r\n        fontWeight: \"500\",\r\n\r\n    },\r\n    subtitle: {\r\n        color: \"black\"\r\n    },\r\n    container: {\r\n        \r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%,-50%)\",\r\n        width: \"100vw\",\r\n        textAlign: \"center\",\r\n        zIndex: 1\r\n    }\r\n}));\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.container}>\r\n            <Typography variant=\"h4\" className={classes.title}>\r\n                <Typed \r\n                  strings={[\"I NEED TO SLEEP\"]} \r\n                  typeSpeed={40}/>\r\n            </Typography>\r\n            <br/>\r\n            <Typography variant=\"h5\" className={classes.subtitle}>\r\n                <Typed \r\n                  strings={[\"Software Engineer\",\"Web Design\", \"Web Development\"]} \r\n                  typeSpeed={40}\r\n                  backSpeed={30}\r\n                  loop\r\n                />\r\n            </Typography>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport Navbar from \"./Navbar\";\r\nimport Header from \"./Header\";\r\nimport Particles from \"react-particles-js\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    particlesCanvas: {\r\n        position: \"absolute\"\r\n\r\n    }\r\n})\r\nconst Home = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <Navbar/>\r\n            <Header/>\r\n    \r\n  \r\n  <Particles canvasClassName={classes.particlesCanvas}\r\n  params={{\r\n      \"particles\": {\r\n          line_linked: {\r\n            \"color\": \"#000000\"\r\n          },\r\n          \"color\": {\r\n              \"value\": \"#000000\"\r\n          },\r\n          \"number\": {\r\n            \"value\": 15\r\n        },\r\n        \"size\": {\r\n            \"value\": 5\r\n        }\r\n    },\r\n    \"interactivity\": {\r\n        \"events\": {\r\n            \"onhover\": {\r\n                \"enable\": true,\r\n                \"mode\": \"repulse\"\r\n            }\r\n        }\r\n    }\r\n}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\nimport './App.css';\nimport Home from \"./components/\";\n\nfunction App() {\n  return (\n   <Home/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}